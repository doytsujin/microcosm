#!/usr/bin/env node

'use strict'

const rollup = require('rollup')
const buble = require('rollup-plugin-buble')
const flow = require('rollup-plugin-flow')
const strip = require('rollup-plugin-strip')
const uglify = require('rollup-plugin-uglify')
const node = require('rollup-plugin-node-resolve')
const json = require('rollup-plugin-json')

const path = require('path')
const minimist = require('minimist')

const options = {
  strict: false,
  minify: false,
  format: 'cjs',
  out: 'build'
}

Object.assign(options, minimist(process.argv.slice(2)))

const plugins = [
  flow(),
  json({
    preferConst: true
  }),
  buble(),
  node({
    preferBuiltins: true
  })
]

const configs = {
  ActionButton: path.resolve('src/addons/action-button.js'),
  ActionForm: path.resolve('src/addons/action-form.js'),
  ActionQueue: path.resolve('src/addons/action-queue.js'),
  CompareTree: path.resolve('src/addons/compare-tree/index.js'),
  Indexing: path.resolve('src/addons/indexing.js'),
  JestMatchers: path.resolve('src/addons/jest-matchers.js'),
  Microcosm: path.resolve('src/index.js'),
  Model: path.resolve('src/addons/model.js'),
  Presenter: path.resolve('src/addons/presenter.js'),
  withSend: path.resolve('src/addons/with-send.js')
}

if (!options.strict) {
  plugins.push(
    strip({
      debugger: true,
      functions: ['console.assert', 'assert'],
      sourceMap: true
    })
  )
}

if (options.minify) {
  plugins.push(
    uglify({
      compress: {
        passes: 2
      },
      mangle: {
        toplevel: true,
        properties: {
          regex: /^_/
        }
      },
      nameCache: {}
    })
  )
}

const external = [
  'react',
  'react-dom',
  'form-serialize',
  'symbol-observable'
]

const globals = {
  react: 'React',
  'react-dom': 'ReactDOM',
  'symbol-observable': '$observable',
  'form-serialize': 'FormSerialize'
}

Object.keys(configs).forEach(key => {
  var entry = configs[key]

  globals[entry] = key
  external.push(entry)
})

for (let name in configs) {
  let input = configs[name]
  let file = input.replace('src', options.out)

  let bundler = rollup.rollup({
    input: input,
    plugins: plugins,
    external: external.filter(path => path !== input),
    onwarn: function(error) {
      // Do not raise warnings for named exports
      if (error.code !== 'MIXED_EXPORTS') {
        console.warn('%s: %s', name, error)
      }
    }
  })

  let write = bundler.then(bundle => {
    return bundle.write({
      globals: globals,
      file: file,
      format: options.format,
      name: name,
      moduleID: path.basename(input, '.js'),
      sourcemap: true
    })
  })

  write.catch(error => console.error(error))
}
